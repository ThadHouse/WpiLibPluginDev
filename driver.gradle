

def driverSetupModel = { project ->
    project.model {
        components {
            driver(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)
                
                
                binaries.all {
                tasks.withType(CppCompile) {
                    addUserLinks(linker, targetPlatform)
                    addWpiLibLink(linker, targetPlatform)
                }
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/driver/src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/driver/include", "${rootDir}/libraries/include", wpilibInclude]
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}


def driverZipTask = { project ->
    project.ext.driverZip = project.tasks.create("${project.isArm ? 'arm' : 'native'}driverZip", Zip) {
        description = 'Creates platform-specific zip of the desktop driver libraries.'
        group = 'WPILib'
        destinationDir = project.buildDir
        baseName = 'driver'
        classifier = "${project.buildPlatform}"
        duplicatesStrategy = 'exclude'

        from(file('driver/include')) {
            into 'include'
        }

        project.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
            }
        }
    }

    project.build.dependsOn project.driverZip

    def releaseTasks = [project.driverZip]

    project.releaseSetup(releaseTasks)

    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("driversharedlibrary") || name.contains("driverstaticlibrary") || name.contains("drivertest")) {
            project.driverZip.dependsOn task
        }
    }
}

if (buildArm) {
    project(':arm:driver') {
        apply plugin: 'cpp'

        apply from: "${rootDir}/toolchains/arm.gradle"
        
        

        driverSetupModel(project)
        driverZipTask(project)
    }
}

if (buildDesktop) {
  project(':native:driver') {
      apply plugin: 'cpp'

      apply from: "${rootDir}/toolchains/native.gradle"

      driverSetupModel(project)
      driverZipTask(project)
  }
}

task driverSourceZip(type: Zip) {
    description = 'Creates a sources-zip of the driver source files'
    group = 'WPILib'
    destinationDir = project.buildDir
    baseName = 'driver'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from('driver/src') {
        into 'src'
    }

    from('driver/include') {
        into 'include'
    }
}
