defineWpiLibProperties()

def driverSetupModel = { project ->
    project.model {
        components {
            driver(NativeLibrarySpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)
                
                

                binaries.all {
                tasks.withType(CppCompile) {
                    addUserLinks(linker, targetPlatform)
                    addWpilibLibraryLinks(it, linker, targetPlatform)
                }
                }

                if (includeJava) {
                    project.setupJniIncludes(binaries)
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/driver/src"]
                            if (includeJava) {
                                srcDirs "${rootDir}/java/lib"
                            }
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/driver/include", "${rootDir}/libraries/include", wpilibInclude]
                            if (includeJava) {
                                project.jniHeadersImpl.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}


def driverZipTask = { pjt ->
    pjt.ext.driverZip = pjt.tasks.create("armdriverZip", Zip) {
        description = 'Creates platform-specific zip of the desktop driver libraries.'
        group = 'WPILib'
        destinationDir = pjt.buildDir
        baseName = 'driver'
        classifier = "${pjt.buildPlatform}"
        duplicatesStrategy = 'exclude'

        from(file('driver/include')) {
            into 'include'
        }

        if (!pjt.hasProperty('skipJava')) {
            pjt.jniHeadersImpl.outputs.each {
                from(it) {
                    into 'include'
                }
            }
        }

        pjt.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into 'lib'
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into 'lib'
                    }
                }
            }
        }

        from (halSharedLib) {
            into 'lib'
        }

        from (halStaticLib) {
            into 'lib'
        }

        from(wpiUtilStaticLib) {
            into 'lib'
        }

        rename ("libHALAthena_shared.so", "libHALAthena.so")
    }

    pjt.build.dependsOn pjt.driverZip

    def releaseTasks = [pjt.driverZip]

    if (includeJava) {
        releaseTasks.add(pjt.jar)
    }

    pjt.releaseSetup(releaseTasks)

    pjt.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("driversharedlibrary") || name.contains("driverstaticlibrary")) {
            pjt.driverZip.dependsOn task
        }
    }
}

project(':arm:driver') {
  apply plugin: 'cpp'

  apply from: "${rootDir}/toolchains/arm.gradle"

  if (includeJava) {
    apply from: "${rootDir}/java/java.gradle"
  }

  driverSetupModel(project)
  driverZipTask(project)
}

task driverSourceZip(type: Zip) {
    description = 'Creates a sources-zip of the driver source files'
    group = 'WPILib'
    destinationDir = project.buildDir
    baseName = 'driver'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from('driver/src') {
        into 'src'
    }

    from('driver/include') {
        into 'include'
    }

    if (includeJava) {
        from('java/lib') {
            into 'src'
        }
        project(':arm:driver').jniHeadersImpl.outputs.each {
            from(it) {
                into 'include'
            }
        }
    }
}
