defineWpiLibProperties()

def $implreplace$SetupModel = { project ->
    project.model {
        components {
            $implreplace$(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)
                
                
                                binaries.all {
                tasks.withType(CppCompile) {
                    addUserLinks(linker, targetPlatform)
                    addWpilibLibraryLinks(it, linker, targetPlatform)
                    //addWpiLibLink(linker, targetPlatform)
                }
                }

                if (includeJava) {
                    project.setupJniIncludes(binaries)
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/src"]
                            if (includeJava) {
                                srcDirs "${rootDir}/java/lib"
                            }
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/include", "${rootDir}/libraries/include", "${rootDir}/wpilib/include"]
                            if (includeJava) {
                                project.jniHeaders$implreplace$.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            includes = ['**/*.h']
                        }
                        if (project.isArm) {
                            lib project: ':arm:$driverreplace$', library: '$driverreplace$', linkage: 'static'
                        } else {
                            lib project: ':native:$driverreplace$', library: '$driverreplace$', linkage: 'static'
                        }
                    }
                }
            }
        }
    }
}

def $implreplace$ZipTask = { project ->
    project.ext.$implreplace$Zip = project.tasks.create("${project.isArm ? 'arm' : 'native'}$implreplace$Zip", Zip) {
        description = 'Creates platform-specific zip of the desktop $implreplace$ libraries.'
        group = 'WPILib'
        destinationDir = project.buildDir
        baseName = '$implreplace$'
        classifier = "${project.buildPlatform}"
        duplicatesStrategy = 'exclude'

        from(file('include')) {
            into 'include'
        }

        if (!project.hasProperty('skipJava')) {
            project.jniHeaders$implreplace$.outputs.each {
                from(it) {
                    into 'include'
                }
            }
        }

        project.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
            }
        }
    }

    project.build.dependsOn project.$implreplace$Zip

    def releaseTasks = [project.$implreplace$Zip]

    if (includeJava) {
        releaseTasks.add(project.jar)
    }

    project.releaseSetup(releaseTasks)

    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$implreplace$sharedlibrary") || name.contains("$implreplace$staticlibrary")) {
            project.$implreplace$Zip.dependsOn task
        }
    }
}

project(':arm:$implreplace$') {
  apply plugin: 'cpp'

  apply from: "${rootDir}/toolchains/arm.gradle"
  if (includeJava) {
    apply from: "${rootDir}/java/java.gradle"
  }

  $implreplace$SetupModel(project)
  $implreplace$ZipTask(project)
}

task $implreplace$SourceZip(type: Zip) {
    description = 'Creates a sources-zip of the $implreplace$ source files'
    group = 'WPILib'
    destinationDir = project.buildDir
    baseName = '$implreplace$'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from('src') {
        into 'src'
    }

    from('include') {
        into 'include'
    }

    if (includeJava) {
        from('java/lib') {
            into 'src'
        }
        project(':arm:$implreplace$').jniHeaders$implreplace$.outputs.each {
            from(it) {
                into 'include'
            }
        }
    }
}
