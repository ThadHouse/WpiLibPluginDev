defineWpiLibProperties()

def $driverreplace$SetupModel = { project ->
    project.model {
        components {
            $driverreplace$(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)
                
                
                binaries.all {
                tasks.withType(CppCompile) {
                    addUserLinks(linker, targetPlatform)
                    addWpilibLibraryLinks(it, linker, targetPlatform)
                }
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/$driverreplace$/src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/$driverreplace$/include", "${rootDir}/libraries/include", wpilibInclude]
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}


def $driverreplace$ZipTask = { project ->
    project.ext.$driverreplace$Zip = project.tasks.create("${project.isArm ? 'arm' : 'native'}$driverreplace$Zip", Zip) {
        description = 'Creates platform-specific zip of the desktop $driverreplace$ libraries.'
        group = 'WPILib'
        destinationDir = project.buildDir
        baseName = '$driverreplace$'
        classifier = "${project.buildPlatform}"
        duplicatesStrategy = 'exclude'

        from(file('$driverreplace$/include')) {
            into 'include'
        }

        project.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
            }
        }
    }

    project.build.dependsOn project.$driverreplace$Zip

    def releaseTasks = [project.$driverreplace$Zip]

    project.releaseSetup(releaseTasks)

    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$driverreplace$sharedlibrary") || name.contains("$driverreplace$staticlibrary")) {
            project.$driverreplace$Zip.dependsOn task
        }
    }
}

project(':arm:$driverreplace$') {
  apply plugin: 'cpp'

  apply from: "${rootDir}/toolchains/arm.gradle"

  $driverreplace$SetupModel(project)
  $driverreplace$ZipTask(project)
}

task $driverreplace$SourceZip(type: Zip) {
    description = 'Creates a sources-zip of the $driverreplace$ source files'
    group = 'WPILib'
    destinationDir = project.buildDir
    baseName = '$driverreplace$'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from('$driverreplace$/src') {
        into 'src'
    }

    from('$driverreplace$/include') {
        into 'include'
    }
}
